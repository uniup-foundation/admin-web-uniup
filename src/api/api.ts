/* tslint:disable */
/* eslint-disable */
/**
 * UNIUP API
 * The UNIUP API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Branch
 */
export interface Branch {
    /**
     * 
     * @type {number}
     * @memberof Branch
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Branch
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface CreateBranchDto
 */
export interface CreateBranchDto {
    /**
     * The name of the branch
     * @type {string}
     * @memberof CreateBranchDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface UpdateBranchDto
 */
export interface UpdateBranchDto {
    /**
     * The name of the branch
     * @type {string}
     * @memberof UpdateBranchDto
     */
    'name'?: string;
}

/**
 * BranchsApi - axios parameter creator
 * @export
 */
export const BranchsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create branch
         * @param {CreateBranchDto} createBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerCreate: async (createBranchDto: CreateBranchDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBranchDto' is not null or undefined
            assertParamExists('branchsControllerCreate', 'createBranchDto', createBranchDto)
            const localVarPath = `/branchs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBranchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read all branchs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/branchs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary read branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('branchsControllerFindOne', 'id', id)
            const localVarPath = `/branchs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('branchsControllerRemove', 'id', id)
            const localVarPath = `/branchs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update branch
         * @param {string} id 
         * @param {UpdateBranchDto} updateBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerUpdate: async (id: string, updateBranchDto: UpdateBranchDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('branchsControllerUpdate', 'id', id)
            // verify required parameter 'updateBranchDto' is not null or undefined
            assertParamExists('branchsControllerUpdate', 'updateBranchDto', updateBranchDto)
            const localVarPath = `/branchs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBranchDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BranchsApi - functional programming interface
 * @export
 */
export const BranchsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BranchsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create branch
         * @param {CreateBranchDto} createBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchsControllerCreate(createBranchDto: CreateBranchDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchsControllerCreate(createBranchDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Read all branchs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchsControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Branch>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchsControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary read branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchsControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchsControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchsControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update branch
         * @param {string} id 
         * @param {UpdateBranchDto} updateBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async branchsControllerUpdate(id: string, updateBranchDto: UpdateBranchDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.branchsControllerUpdate(id, updateBranchDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BranchsApi - factory interface
 * @export
 */
export const BranchsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BranchsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create branch
         * @param {CreateBranchDto} createBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerCreate(createBranchDto: CreateBranchDto, options?: any): AxiosPromise<Branch> {
            return localVarFp.branchsControllerCreate(createBranchDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read all branchs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerFindAll(options?: any): AxiosPromise<Array<Branch>> {
            return localVarFp.branchsControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary read branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerFindOne(id: string, options?: any): AxiosPromise<Branch> {
            return localVarFp.branchsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete branch
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerRemove(id: string, options?: any): AxiosPromise<Branch> {
            return localVarFp.branchsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update branch
         * @param {string} id 
         * @param {UpdateBranchDto} updateBranchDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        branchsControllerUpdate(id: string, updateBranchDto: UpdateBranchDto, options?: any): AxiosPromise<Branch> {
            return localVarFp.branchsControllerUpdate(id, updateBranchDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BranchsApi - object-oriented interface
 * @export
 * @class BranchsApi
 * @extends {BaseAPI}
 */
export class BranchsApi extends BaseAPI {
    /**
     * 
     * @summary Create branch
     * @param {CreateBranchDto} createBranchDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchsApi
     */
    public branchsControllerCreate(createBranchDto: CreateBranchDto, options?: AxiosRequestConfig) {
        return BranchsApiFp(this.configuration).branchsControllerCreate(createBranchDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read all branchs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchsApi
     */
    public branchsControllerFindAll(options?: AxiosRequestConfig) {
        return BranchsApiFp(this.configuration).branchsControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary read branch
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchsApi
     */
    public branchsControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return BranchsApiFp(this.configuration).branchsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete branch
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchsApi
     */
    public branchsControllerRemove(id: string, options?: AxiosRequestConfig) {
        return BranchsApiFp(this.configuration).branchsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update branch
     * @param {string} id 
     * @param {UpdateBranchDto} updateBranchDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchsApi
     */
    public branchsControllerUpdate(id: string, updateBranchDto: UpdateBranchDto, options?: AxiosRequestConfig) {
        return BranchsApiFp(this.configuration).branchsControllerUpdate(id, updateBranchDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HelloWorldApi - axios parameter creator
 * @export
 */
export const HelloWorldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HelloWorldApi - functional programming interface
 * @export
 */
export const HelloWorldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HelloWorldApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HelloWorldApi - factory interface
 * @export
 */
export const HelloWorldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HelloWorldApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HelloWorldApi - object-oriented interface
 * @export
 * @class HelloWorldApi
 * @extends {BaseAPI}
 */
export class HelloWorldApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HelloWorldApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return HelloWorldApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}


